//
//  MineDetailsDepartmentViewController.swift
//  E-commerce
//
//  Created by YE on 2017/8/2.
//  Copyright © 2017年 Eter. All rights reserved.
//

import UIKit


enum EnterpriseType {
    case Department
    case Enterprise
}


class MineDetailsDepartmentViewController: BaseTableViewController
{

    var type: EnterpriseType = .Department
    var selected: ((MineDetailsDepartmentModel) -> Void)?
    var models: [MineDetailsDepartmentModel]?
    var enterpriseSelected: ((EnterpriseModel) -> Void)?
    var enterprises: [EnterpriseModel]?
    
    fileprivate enum ReuseIdentifier {
        static let Department = "Department"
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configTableView()
        fetchData()
        configNavigationBar()
    }
    
    fileprivate func configNavigationBar() {
        
        switch type {
        case .Enterprise: navigationItem.title = "选择企业"
        case .Department: navigationItem.title = "选择部门"
        }
    }
    
    fileprivate func fetchData() {
        
        switch type {
        case .Enterprise:
            
            UserInfoNet.fetchDataWith(transCode: TransCode.UserInfo.enterprise, params: [String: Any](), handle: { (response, isLoadFaild, errorMsg) in
                
                if isLoadFaild {
                    return super.hudWithMssage(msg: errorMsg)
                }
                
                self.enterprises = EnterpriseModel.models(type: EnterpriseModel.self, fromDic: response) as? [EnterpriseModel]
                DispatchQueue.main.async {
                    self.tableView.reloadData()
                }
            })
            
        default:
            
            let loginModel = LoginModel.load()!
            let params = ["user_no": loginModel.user_id,
                          "enterprise_id": loginModel.user_identifyid]
            
            UserInfoNet.fetchDataWith(transCode: TransCode.UserInfo.department, params: params, handle: { (response, isLoadFaild, errorMsg) in
                
                if isLoadFaild {
                    return super.hudWithMssage(msg: errorMsg)
                }
                
                self.models = MineDetailsDepartmentModel.models(type: MineDetailsDepartmentModel.self, fromDic: response) as? [MineDetailsDepartmentModel]
                DispatchQueue.main.async {
                    self.tableView.reloadData()
                }
            })
        }
        
        
    }
    
    fileprivate func configTableView() {
        
        tableView.estimatedRowHeight = tableView.rowHeight
        tableView.rowHeight = UITableViewAutomaticDimension
    }

}
// MARK: - UITableView delegate Datasource
extension MineDetailsDepartmentViewController {
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        switch type {
        case .Enterprise:
            if let enterprises = enterprises {
                return enterprises.count
            }
        default:
            if let models = models {
                return models.count
            }
        }
        
        
        
        return 0
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: ReuseIdentifier.Department, for: indexPath)
        
        switch type {
        case .Department:
            (cell as! MineDetailsDepartmentTableViewCell).model = models?[indexPath.row]
        default:
            (cell as! MineDetailsDepartmentTableViewCell).enterprise = enterprises?[indexPath.row]
        }
        
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        if let selected = selected {
            let model = models![indexPath.row]
            selected(model)
        }
        
        if let enterprise = enterpriseSelected {
            
            let model = enterprises![indexPath.row]
            enterprise(model)
        }
        
        navigationController?.ecPopViewController()
    }
}
